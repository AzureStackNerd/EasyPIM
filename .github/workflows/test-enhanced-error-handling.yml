name: 🧪 Enhanced Error Handling Validation v2.0.17

on:
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of test to run'
        required: true
        default: 'error-handling'
        type: choice
        options:
        - error-handling
        - module-loading
        - all

jobs:
  test-error-handling:
    if: github.event.inputs.test_type == 'error-handling' || github.event.inputs.test_type == 'all'
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
        shell_type: [pwsh, powershell]
        exclude:
          - os: ubuntu-latest
            shell_type: powershell
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Prerequisites (Windows)
        if: runner.os == 'Windows'
        run: .\build\vsts-prerequisites.ps1
        shell: pwsh

      - name: Install Prerequisites (Linux)
        if: runner.os == 'Linux'
        shell: pwsh
        run: |
          Install-Module -Name Pester -Force -Scope CurrentUser -SkipPublisherCheck
          Write-Host "Installing minimal PowerShell modules for testing..."

      - name: Test Enhanced Error Handling (PowerShell Core)
        if: matrix.shell_type == 'pwsh'
        shell: pwsh
        run: |
          Write-Host "=== Enhanced Error Handling Validation ===" -ForegroundColor Cyan
          Write-Host "OS: ${{ runner.os }}" -ForegroundColor Yellow
          Write-Host "PowerShell: pwsh (Core)" -ForegroundColor Yellow
          Write-Host "PSVersion: $($PSVersionTable.PSVersion)" -ForegroundColor Yellow

          # Import modules
          try {
            if ('${{ runner.os }}' -eq 'Windows') {
              Import-Module ".\EasyPIM\EasyPIM.psm1" -Force
              Import-Module ".\EasyPIM.Orchestrator\EasyPIM.Orchestrator.psm1" -Force
            } else {
              Import-Module "./EasyPIM/EasyPIM.psm1" -Force
              Import-Module "./EasyPIM.Orchestrator/EasyPIM.Orchestrator.psm1" -Force
            }
            Write-Host "✅ Modules imported successfully" -ForegroundColor Green
          } catch {
            Write-Host "❌ Module import failed: $($_.Exception.Message)" -ForegroundColor Red
            exit 1
          }

          # Test function availability
          Write-Host "`n🧪 Test: Critical Function Availability" -ForegroundColor Green
          $criticalFunctions = @('Get-EasyPIMConfiguration', 'Invoke-EasyPIMOrchestrator')
          
          foreach ($func in $criticalFunctions) {
            $command = Get-Command -Name $func -ErrorAction SilentlyContinue
            if ($command) {
              Write-Host "✅ $func available" -ForegroundColor Green
            } else {
              Write-Host "❌ $func NOT FOUND" -ForegroundColor Red
              exit 1
            }
          }

          # Test enhanced error code presence
          Write-Host "`n🧪 Test: Enhanced Error Handling Code" -ForegroundColor Green
          $configFunction = Get-Command Get-EasyPIMConfiguration
          $hasEnhancedHandling = $configFunction.Definition -like "*Enhanced JSON parsing*"
          $hasRetryLogic = $configFunction.Definition -like "*maxRetries*"
          
          if ($hasEnhancedHandling) {
            Write-Host "✅ Enhanced JSON parsing present" -ForegroundColor Green
          } else {
            Write-Host "⚠️ Enhanced JSON parsing not found" -ForegroundColor Yellow
          }
          
          if ($hasRetryLogic) {
            Write-Host "✅ Retry logic present" -ForegroundColor Green
          } else {
            Write-Host "⚠️ Retry logic not found" -ForegroundColor Yellow
          }

          Write-Host "`n✅ PowerShell Core tests completed!" -ForegroundColor Green

      - name: Test Enhanced Error Handling (Windows PowerShell)
        if: matrix.shell_type == 'powershell' && runner.os == 'Windows'
        shell: powershell
        run: |
          Write-Host "=== Enhanced Error Handling Validation ===" -ForegroundColor Cyan
          Write-Host "OS: ${{ runner.os }}" -ForegroundColor Yellow
          Write-Host "PowerShell: Windows PowerShell 5.x" -ForegroundColor Yellow
          Write-Host "PSVersion: $($PSVersionTable.PSVersion)" -ForegroundColor Yellow

          # Import modules
          try {
            Import-Module ".\EasyPIM\EasyPIM.psm1" -Force
            Import-Module ".\EasyPIM.Orchestrator\EasyPIM.Orchestrator.psm1" -Force
            Write-Host "✅ Modules imported successfully" -ForegroundColor Green
          } catch {
            Write-Host "❌ Module import failed: $($_.Exception.Message)" -ForegroundColor Red
            exit 1
          }

          # Test function availability
          Write-Host "`n🧪 Test: Critical Function Availability" -ForegroundColor Green
          $criticalFunctions = @('Get-EasyPIMConfiguration', 'Invoke-EasyPIMOrchestrator')
          
          foreach ($func in $criticalFunctions) {
            $command = Get-Command -Name $func -ErrorAction SilentlyContinue
            if ($command) {
              Write-Host "✅ $func available" -ForegroundColor Green
            } else {
              Write-Host "❌ $func NOT FOUND" -ForegroundColor Red
              exit 1
            }
          }

          # Test enhanced error code presence
          Write-Host "`n🧪 Test: Enhanced Error Handling Code" -ForegroundColor Green
          $configFunction = Get-Command Get-EasyPIMConfiguration
          $hasEnhancedHandling = $configFunction.Definition -like "*Enhanced JSON parsing*"
          $hasRetryLogic = $configFunction.Definition -like "*maxRetries*"
          
          if ($hasEnhancedHandling) {
            Write-Host "✅ Enhanced JSON parsing present" -ForegroundColor Green
          } else {
            Write-Host "⚠️ Enhanced JSON parsing not found" -ForegroundColor Yellow
          }
          
          if ($hasRetryLogic) {
            Write-Host "✅ Retry logic present" -ForegroundColor Green
          } else {
            Write-Host "⚠️ Retry logic not found" -ForegroundColor Yellow
          }

          Write-Host "`n✅ Windows PowerShell tests completed!" -ForegroundColor Green

  test-module-loading:
    if: github.event.inputs.test_type == 'module-loading' || github.event.inputs.test_type == 'all'
    runs-on: windows-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Prerequisites
        run: .\build\vsts-prerequisites.ps1
        shell: pwsh

      - name: Test Module Loading
        shell: pwsh
        run: |
          Write-Host "=== Module Loading Test ===" -ForegroundColor Cyan
          
          Import-Module ".\EasyPIM\EasyPIM.psm1" -Force -Verbose
          $coreCommands = Get-Command -Module EasyPIM
          Write-Host "✅ EasyPIM Core: $($coreCommands.Count) commands loaded" -ForegroundColor Green
          
          Import-Module ".\EasyPIM.Orchestrator\EasyPIM.Orchestrator.psm1" -Force -Verbose
          $orchestratorCommands = Get-Command -Module EasyPIM.Orchestrator
          Write-Host "✅ EasyPIM Orchestrator: $($orchestratorCommands.Count) commands loaded" -ForegroundColor Green
          
          Write-Host "✅ Module loading tests completed!" -ForegroundColor Green

  summary:
    if: always()
    needs: [test-error-handling, test-module-loading]
    runs-on: ubuntu-latest
    steps:
      - name: Test Summary
        run: |
          echo "## Enhanced Error Handling Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Status" >> $GITHUB_STEP_SUMMARY
          echo "- Error Handling Tests: ${{ needs.test-error-handling.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Module Loading Tests: ${{ needs.test-module-loading.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Key Improvements Tested" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Enhanced JSON parsing error diagnostics" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Key Vault retry logic for CI/CD reliability" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Cross-platform compatibility" >> $GITHUB_STEP_SUMMARY
