# Example: Using EasyPIM with GitHub Actions OIDC (Official Microsoft Pattern)
# This demonstrates the CORRECT way to use EasyPIM in GitHub Actions with OIDC authentication
# following Microsoft's official documentation patterns.

name: EasyPIM with GitHub Actions OIDC

on:
  workflow_dispatch:
  push:
    branches: [ main ]

permissions:
  id-token: write   # Required for OIDC token acquisition
  contents: read

jobs:
  easypim-demo:
    runs-on: ubuntu-latest
    environment: production  # Use GitHub environment for additional security
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    
    # CRITICAL: Use the official Azure Login action with OIDC
    # This is the Microsoft-recommended approach that EasyPIM now supports
    - name: Azure Login with OIDC
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        enable-AzPSSession: true  # Important: Enables Azure PowerShell context
    
    # After azure/login@v2, EasyPIM will automatically use the established Azure PowerShell context
    - name: Install and Run EasyPIM
      shell: pwsh
      run: |
        # Install EasyPIM modules (example - adjust based on your setup)
        Install-Module -Name EasyPIM -Force -Scope CurrentUser
        
        # EasyPIM will now automatically use the Azure PowerShell context
        # established by the azure/login@v2 action above
        Import-Module EasyPIM
        
        # Example EasyPIM commands - these will use the OIDC authentication
        Get-PIMEligibleRole -PrincipalId "user@domain.com"
        
        # The ARM API calls will work because:
        # 1. azure/login@v2 established the Azure PowerShell context
        # 2. EasyPIM's Invoke-ARM function prioritizes Azure PowerShell context
        # 3. No custom token handling needed!

# Prerequisites for this workflow:
# 1. Create an Azure App Registration or User-Assigned Managed Identity
# 2. Configure federated identity credentials:
#    - Issuer: https://token.actions.githubusercontent.com
#    - Subject: repo:owner/repo:environment:production
#    - Audience: api://AzureADTokenExchange
# 3. Create GitHub repository secrets:
#    - AZURE_CLIENT_ID: Application (client) ID
#    - AZURE_TENANT_ID: Directory (tenant) ID  
#    - AZURE_SUBSCRIPTION_ID: Subscription ID
# 4. Assign appropriate Azure RBAC roles to the identity
#
# Documentation: https://learn.microsoft.com/en-us/azure/developer/github/connect-from-azure-openid-connect
