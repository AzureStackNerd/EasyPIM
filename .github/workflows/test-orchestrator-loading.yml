name: Test Orchestrator Module Loading

on:
  workflow_dispatch:
  push:
    branches: [ chore/orchestrator-hardening ]
  pull_request:
    branches: [ main ]

jobs:
  test-module-loading:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup PowerShell
      shell: pwsh
      run: |
        Write-Host "PowerShell version: $($PSVersionTable.PSVersion)" -ForegroundColor Green

    - name: Test Module Import and Helper Loading
      shell: pwsh
      run: |
        Write-Host "=== Testing EasyPIM.Orchestrator Module Loading ===" -ForegroundColor Cyan

        # Set verbose preference to see detailed loading info
        $VerbosePreference = 'Continue'

        # Test 1: Import orchestrator module
        Write-Host "`n1. Testing orchestrator module import..." -ForegroundColor Yellow
        try {
          Import-Module './EasyPIM.Orchestrator/EasyPIM.Orchestrator.psd1' -Force -Verbose
          Write-Host "‚úÖ Orchestrator module imported successfully" -ForegroundColor Green
        } catch {
          Write-Host "‚ùå Failed to import orchestrator module: $($_.Exception.Message)" -ForegroundColor Red
          exit 1
        }

        # Test 2: Check if helper functions are available
        Write-Host "`n2. Testing helper function availability..." -ForegroundColor Yellow
        $requiredFunctions = @('Write-SectionHeader', 'invoke-graph', 'Test-PrincipalExists', 'Initialize-EasyPIMPolicies', 'Get-PIMAzureEnvironmentEndpoint')
        $missingFunctions = @()

        foreach ($func in $requiredFunctions) {
          if (Get-Command $func -ErrorAction SilentlyContinue) {
            Write-Host "‚úÖ $func is available" -ForegroundColor Green
          } else {
            Write-Host "‚ùå $func is missing" -ForegroundColor Red
            $missingFunctions += $func
          }
        }

        if ($missingFunctions.Count -gt 0) {
          Write-Host "`nMissing functions: $($missingFunctions -join ', ')" -ForegroundColor Red
          exit 1
        }

        # Test 3: Test orchestrator function
        Write-Host "`n3. Testing orchestrator function..." -ForegroundColor Yellow
        try {
          $testResult = Get-Command Invoke-EasyPIMOrchestrator -ErrorAction Stop
          Write-Host "‚úÖ Invoke-EasyPIMOrchestrator is available" -ForegroundColor Green
        } catch {
          Write-Host "‚ùå Invoke-EasyPIMOrchestrator not found: $($_.Exception.Message)" -ForegroundColor Red
          exit 1
        }

        # Test 4: Show module information
        Write-Host "`n4. Module information..." -ForegroundColor Yellow
        $modules = Get-Module EasyPIM*
        foreach ($module in $modules) {
          Write-Host "Module: $($module.Name) v$($module.Version) from $($module.Path)" -ForegroundColor Cyan
        }

        Write-Host "`nüéâ All tests passed! Orchestrator module loading works correctly in GitHub Actions." -ForegroundColor Green

    - name: Test Module Loading Paths
      shell: pwsh
      run: |
        Write-Host "=== Testing Module Loading Path Resolution ===" -ForegroundColor Cyan

        # Check what paths were attempted
        Write-Host "`nChecking expected paths..." -ForegroundColor Yellow

        $expectedPaths = @(
          './EasyPIM/internal/functions'
          './shared/EasyPIM.Shared/EasyPIM.Shared.psd1'
        )

        foreach ($path in $expectedPaths) {
          if (Test-Path $path) {
            Write-Host "‚úÖ Path exists: $path" -ForegroundColor Green
            if ($path -like "*/functions") {
              $files = Get-ChildItem $path -Filter "*.ps1" | Select-Object -First 3
              Write-Host "   Sample files: $($files.Name -join ', ')..." -ForegroundColor Gray
            }
          } else {
            Write-Host "‚ùå Path missing: $path" -ForegroundColor Red
          }
        }

        # Show current working directory and structure
        Write-Host "`nCurrent directory: $(Get-Location)" -ForegroundColor Yellow
        Write-Host "Directory structure:" -ForegroundColor Yellow
        Get-ChildItem -Directory | ForEach-Object { Write-Host "  üìÅ $($_.Name)" -ForegroundColor Gray }
