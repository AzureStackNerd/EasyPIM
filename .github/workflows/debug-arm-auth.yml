name: 'DEBUG: ARM Authentication Testing'

on:
  workflow_dispatch:
    inputs:
      subscription_id:
        description: "Azure Subscription ID for testing"
        required: true
        type: string

env:
  TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  SUBSCRIPTION_ID: ${{ github.event.inputs.subscription_id }}
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}

permissions:
  id-token: write
  contents: read

jobs:
  debug-arm-auth:
    name: 'Debug ARM Authentication'
    runs-on: ubuntu-latest

    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4

      - name: 'Azure OIDC Login'
        uses: azure/login@v2
        with:
          tenant-id: ${{ env.TENANT_ID }}
          subscription-id: ${{ env.SUBSCRIPTION_ID }}
          client-id: ${{ env.AZURE_CLIENT_ID }}
          enable-AzPSSession: true

      - name: 'Run ARM Authentication Debug Suite'
        shell: pwsh
        run: |
          Write-Host "🚀 Starting ARM Authentication Debug Suite" -ForegroundColor Cyan
          
          # Import required modules
          Import-Module Az.Accounts -Force
          
          # Load our debug script
          . ./debug/Test-ARMAuthentication-Debug.ps1 -SubscriptionId "${{ env.SUBSCRIPTION_ID }}" -Verbose
          
          Write-Host "`n🔧 Testing with debug Invoke-ARM function..." -ForegroundColor Cyan
          
          # Load the debug Invoke-ARM function
          . ./debug/Invoke-ARM-Debug.ps1
          
          # Test a simple ARM call
          $testUri = "https://management.azure.com/subscriptions/${{ env.SUBSCRIPTION_ID }}/providers/Microsoft.Authorization/roleManagementPolicies?api-version=2020-10-01&`$filter=scopeId eq '/subscriptions/${{ env.SUBSCRIPTION_ID }}'"
          
          try {
              Write-Host "🧪 Testing debug Invoke-ARM function..." -ForegroundColor Yellow
              $result = Invoke-ARM-Debug -restURI $testUri -method "GET" -SubscriptionId "${{ env.SUBSCRIPTION_ID }}"
              Write-Host "✅ Debug Invoke-ARM succeeded!" -ForegroundColor Green
              Write-Host "   Retrieved: $($result.value.Count) policies" -ForegroundColor Gray
          } catch {
              Write-Host "❌ Debug Invoke-ARM failed: $($_.Exception.Message)" -ForegroundColor Red
          }

      - name: 'Test Environment Variable Fallback'
        shell: pwsh
        run: |
          Write-Host "🧪 Testing environment variable fallback method..." -ForegroundColor Yellow
          
          # Get ARM token via Azure CLI and set environment variables
          $armToken = az account get-access-token --resource https://management.azure.com/ --query accessToken --output tsv
          
          if ($armToken) {
              Write-Host "✅ Got ARM token from Azure CLI" -ForegroundColor Green
              
              # Set environment variables that EasyPIM checks
              $env:AZURE_ACCESS_TOKEN = $armToken
              $env:ARM_ACCESS_TOKEN = $armToken
              
              Write-Host "✅ Environment variables set for EasyPIM fallback" -ForegroundColor Green
              Write-Host "   AZURE_ACCESS_TOKEN length: $($env:AZURE_ACCESS_TOKEN.Length)" -ForegroundColor Gray
              
              # Test direct ARM call
              $headers = @{
                  'Authorization' = "Bearer $armToken"
                  'Content-Type' = 'application/json'
              }
              
              $testUri = "https://management.azure.com/subscriptions/${{ env.SUBSCRIPTION_ID }}/providers/Microsoft.Authorization/roleManagementPolicies?api-version=2020-10-01&`$filter=scopeId eq '/subscriptions/${{ env.SUBSCRIPTION_ID }}'"
              
              try {
                  $response = Invoke-RestMethod -Uri $testUri -Headers $headers -Method GET
                  Write-Host "✅ Direct ARM API call with CLI token succeeded!" -ForegroundColor Green
                  Write-Host "   Retrieved: $($response.value.Count) policies" -ForegroundColor Gray
              } catch {
                  Write-Host "❌ Direct ARM API call failed: $($_.Exception.Message)" -ForegroundColor Red
              }
          } else {
              Write-Host "❌ Failed to get ARM token from Azure CLI" -ForegroundColor Red
          }

      - name: 'Generate Debug Summary'
        if: always()
        run: |
          echo "# 🔍 ARM Authentication Debug Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "This workflow tested various ARM authentication methods to identify what works in GitHub Actions with OIDC." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Review the detailed logs above to see which authentication method worked" >> $GITHUB_STEP_SUMMARY
          echo "2. Update the actual EasyPIM code based on the working method" >> $GITHUB_STEP_SUMMARY
          echo "3. Test with a local development version before publishing" >> $GITHUB_STEP_SUMMARY
